import mongoose, { Schema, Document, Types } from "mongoose";

// Interface for the cash history entry
export interface ICashCollected {
  _id?: Types.ObjectId; // Optional _id field for each cash entry (unique automatically generated by Mongoose)
  cashAmount: number;
  collectedAt: Date;
  status: "Pending" | "Received" | "Not Received";
  remarks?: string;
}

// Main Cash document interface
export interface ICash extends Document {
  availableCash: number;
  cashCollectedHistory: ICashCollected[];
}

const CashCollectedSchema = new Schema<ICashCollected>(
  {
    cashAmount: { type: Number, required: true },
    collectedAt: { type: Date, default: Date.now },
    status: {
      type: String,
      enum: ["Pending", "Received", "Not Received"],
      default: "Pending", // Set default to "Pending" as it's the most logical default
    },
    remarks: { type: String, default: "" }, // Optional remarks field with default empty string
  },
  { _id: true } // Ensures every subdocument gets a unique `_id`
);

const CashSchema = new Schema<ICash>(
  {
    availableCash: { type: Number, default: 0 },
    cashCollectedHistory: [CashCollectedSchema], // Array of cash history entries
  },
  { timestamps: true } // Adds createdAt and updatedAt timestamps to the parent document
);

export default mongoose.models.Cash || mongoose.model<ICash>("Cash", CashSchema);
